// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AcademicSemester {
  id                    String                 @id @default(uuid())
  year                  Int
  title                 String
  code                  String
  startMonth            String
  endMonth              String
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  students              Student[]
  semesterRegistrations SemesterRegistration[]

  @@map("academic_semesters")
}

model AcademicFaculty {
  id                  String               @id @default(uuid())
  title               String
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  academicDepartments AcademicDepartment[]
  students            Student[]
  faculties           Faculty[]

  @@map("academic_faculties")
}

model AcademicDepartment {
  id        String   @id @default(uuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  AcademicFaculty   AcademicFaculty? @relation(fields: [academicFacultyId], references: [id])
  academicFacultyId String?
  students          Student[]
  faculties         Faculty[]
  offeredCourses    OfferedCourse[]

  @@map("academic_departments")
}

model Student {
  id           String @id @default(uuid())
  studentId    String
  firstName    String
  lastName     String
  middleName   String
  profileImage String
  email        String
  contactNo    Int
  gender       String
  bloodGroup   String

  academicSemesterId String
  academicSemester   AcademicSemester @relation(fields: [academicSemesterId], references: [id])

  academicDepartmentId String
  academicDepartment   AcademicDepartment @relation(fields: [academicDepartmentId], references: [id])

  academicFacultyId String
  academicFaculty   AcademicFaculty @relation(fields: [academicFacultyId], references: [id])

  createdAt                    DateTime                      @default(now())
  updatedAt                    DateTime                      @updatedAt
  studentSemesterRegistrations StudentSemesterRegistration[]

  @@map("students")
}

model Faculty {
  id           String @id @default(uuid())
  facultyId    String
  designation  String
  firstName    String
  lastName     String
  middleName   String
  profileImage String
  email        String
  contactNo    Int
  gender       String
  bloodGroup   String

  academicDepartmentId String
  acadeicDepartment    AcademicDepartment @relation(fields: [academicDepartmentId], references: [id])

  academicFacultyId String
  academicFaculty   AcademicFaculty @relation(fields: [academicFacultyId], references: [id])

  createdAt                   DateTime                     @default(now())
  updatedAt                   DateTime                     @updatedAt
  courses                     CourseFaculty[]
  offeredCourseClassSchedules OfferedCourseClassSchedule[]

  @@map("faculty")
}

model Building {
  id        String   @id @default(uuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  rooms     Room[]

  @@map("buildings")
}

model Room {
  id                          String                       @id @default(uuid())
  roomNumber                  String
  floor                       String
  createdAt                   DateTime                     @default(now())
  updatedAt                   DateTime                     @updatedAt
  buildingId                  String
  building                    Building                     @relation(fields: [buildingId], references: [id])
  offeredCourseClassSchedules OfferedCourseClassSchedule[]
}

model Course {
  id              String                 @id @default(uuid())
  title           String
  code            String
  credits         Int
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  preRequsite     CourseToPrerequisite[] @relation("CourseToPreRequisite")
  preRequisiteFor CourseToPrerequisite[] @relation("PreRequisiteForCourse")
  faculties       CourseFaculty[]
  offeredCourses  OfferedCourse[]

  @@map("courses")
}

model CourseToPrerequisite {
  courseId       String
  preRequisiteId String

  course       Course @relation(fields: [courseId], references: [id], name: "CourseToPreRequisite")
  preRequisite Course @relation(fields: [preRequisiteId], references: [id], name: "PreRequisiteForCourse")

  @@id([courseId, preRequisiteId])
}

model CourseFaculty {
  courseId String
  course   Course @relation(fields: [courseId], references: [id])

  facultyId String
  faculty   Faculty @relation(fields: [facultyId], references: [id])

  @@id([courseId, facultyId])
}

enum SemesterRegistrationStatus {
  UPCOMING
  ONGOING
  ENDED
}

model SemesterRegistration {
  id        String                     @id @default(uuid())
  startDate DateTime
  endDate   DateTime
  status    SemesterRegistrationStatus @default(UPCOMING)
  minCredit Int                        @default(0)
  maxCredit Int                        @default(0)
  createdAt DateTime                   @default(now())
  updatedAt DateTime                   @updatedAt

  academicSemesterId           String
  academicSemester             AcademicSemester              @relation(fields: [academicSemesterId], references: [id])
  offeredCourses               OfferedCourse[]
  offeredCourseSections        OfferedCourseSection[]
  offeredCourseClassSchedules  OfferedCourseClassSchedule[]
  studentSemesterRegistrations StudentSemesterRegistration[]

  @@map("semester_registration")
}

model OfferedCourse {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id])

  academicDepartmentId String
  academicDepartment   AcademicDepartment @relation(fields: [academicDepartmentId], references: [id])

  semesterRegistrationId String
  semesterRegistration   SemesterRegistration   @relation(fields: [semesterRegistrationId], references: [id])
  offeredCourseSections  OfferedCourseSection[]

  @@map("offered_course")
}

model OfferedCourseSection {
  id                       String        @id @default(uuid())
  title                    String
  maxCapacity              Int
  currentlyEnrolledStudent Int           @default(0)
  createdAt                DateTime      @default(now())
  updatedAt                DateTime      @updatedAt
  offeredCourseId          String
  offeredCourse            OfferedCourse @relation(fields: [offeredCourseId], references: [id])

  semesterRegistrationId      String
  semesterRegistration        SemesterRegistration         @relation(fields: [semesterRegistrationId], references: [id])
  offeredCourseClassSchedules OfferedCourseClassSchedule[]

  @@map("offered_course_section")
}

model OfferedCourseClassSchedule {
  id                     String                              @id @default(uuid())
  startTime              String
  endTime                String
  dayOfWeek              OfferedCourseClassScheduleDayOfWeek @default(SATURDAY)
  createdAt              DateTime                            @default(now())
  updatedAt              DateTime                            @updatedAt
  offeredCourseSectionId String
  offeredCourseSection   OfferedCourseSection                @relation(fields: [offeredCourseSectionId], references: [id])

  semesterRegistrationId String
  semesterRegistration   SemesterRegistration @relation(fields: [semesterRegistrationId], references: [id])

  roomId String
  room   Room   @relation(fields: [roomId], references: [id])

  facultyId String
  faculty   Faculty @relation(fields: [facultyId], references: [id])

  @@map("offered_course_class_schedule")
}

enum OfferedCourseClassScheduleDayOfWeek {
  SATURDAY
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}

model StudentSemesterRegistration {
  id                String   @id @default(uuid())
  isConfirmed       Boolean  @default(false)
  totalCreditsTaken Int      @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  semesterRegistrationId String
  semesterRegistration   SemesterRegistration @relation(fields: [semesterRegistrationId], references: [id])

  studentId String
  student   Student @relation(fields: [studentId], references: [id])

  @@map("student_semester_registration")
}
